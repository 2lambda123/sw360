image: maven:3.6.3-openjdk-11

stages:
- build
- deploy_to_dev
- deploy_to_stage

services:
- couchdb:3.1.1

variables:
  PACKAGE_STORE_PATH: "/home/${SSH_PACKAGE_USER}/cipackages/${CI_COMMIT_REF_SLUG}"
  DEPLOY_STORE_PATH:  "/home/${SSH_TEST_DEPLOY_USER}/deppackage"
  PACKAGE_NAME_PREFIX: "sw360"
  COUCHDB_USER: $COUCHDB_TEST_USER
  COUCHDB_PASSWORD: $COUCHDB_TEST_PWD
  https_proxy: $CODE_PROXY
  http_proxy: $CODE_PROXY
  no_proxy: couchdb,linux.siemens.com,.siemens.com,.siemens.de,.siemens.co.in
  _JAVA_OPTIONS: -Djdk.net.URLClassPath.disableClassPathURLCheck=true -DSPDXParser.OnlyUseLocalLicenses=true -Dhttp.proxySet=true -Dhttp.proxyHost=$CODE_PROXY_HOST -Dhttp.proxyPort=$CODE_PROXY_PORT -Dhttp.nonProxyHosts=localhost|couchdb

build_sw360:
  stage: build
  script:
  - echo "Running build_sw360 by user - ${GITLAB_USER_EMAIL}"
  - mkdir -p ${GITLAB_PACKAGE_PATH}/artifacts/packages/deploy ${GITLAB_PACKAGE_PATH}/artifacts/packages/webapps ${GITLAB_PACKAGE_PATH}/artifacts/scripts /etc/sw360/

  # setting remote repos url to download mvn packages
  - echo '<settings><mirrors><mirror><mirrorOf>*</mirrorOf><name>remote-repos</name><url>https://devops.bt.siemens.com/artifactory/maven2-all</url><id>remote-repos</id></mirror></mirrors></settings>' > ~/.m2/settings.xml

  # Create couchdb-test.properties in /etc/sw360 to run testcases
  - echo 'couchdb.url = http://couchdb:5984' > /etc/sw360/couchdb-test.properties
  - echo "couchdb.user = ${COUCHDB_TEST_USER}" >> /etc/sw360/couchdb-test.properties
  - echo "couchdb.password = ${COUCHDB_TEST_PWD}" >> /etc/sw360/couchdb-test.properties

  # Create databasetest.properties in /etc/sw360 to run testcases
  - echo 'couch_db_url = http://couchdb:5984' > /etc/sw360/databasetest.properties
  - echo "couchdb.username = ${COUCHDB_TEST_USER}" >> /etc/sw360/databasetest.properties
  - echo "couchdb.password = ${COUCHDB_TEST_PWD}" >> /etc/sw360/databasetest.properties

  - apt-get -qq update && apt-get -qq -y install build-essential rsync && apt-get install zip -y --no-install-recommends && apt-get install awscli -y --no-install-recommends
  - ./scripts/install-thrift.sh

  # Check if CouchDB is running
  - curl -s couchdb:5984/_utils

  # Checkout branch for proper footer
  - git checkout ${CI_COMMIT_REF_NAME}

  # Build code and create artifacts
  - mvn --batch-mode clean package -P deploy -Dbase.deploy.dir=. -Dliferay.deploy.dir=${GITLAB_PACKAGE_PATH}/artifacts/packages/deploy -Dbackend.deploy.dir=${GITLAB_PACKAGE_PATH}/artifacts/packages/webapps -Drest.deploy.dir=${GITLAB_PACKAGE_PATH}/artifacts/packages/webapps -Dmaven.repo.local=.m2/repository
  - cp ./scripts/aws_codedeploy/application* ${GITLAB_PACKAGE_PATH}/artifacts/scripts
  - cp ./scripts/aws_codedeploy/appspec.yml ${GITLAB_PACKAGE_PATH}/artifacts/
  - cd ${GITLAB_PACKAGE_PATH}/artifacts
  - zip -r ${GITLAB_PACKAGE_PATH}/artifacts.zip *

  # Upload packages to s3 if CI_COMMIT_REF_SLUG matches DEPLOY_BRANCH
  - cd /builds/sw360/sw360portal
  - ./scripts/aws_codedeploy/upload_packages_to_s3.sh

deploy_sw360_DEV_server:
  allow_failure: true
  stage: deploy_to_dev
  environment:
    name: Dev
  rules:
    - if: '$CI_COMMIT_BRANCH == $AUTO_DEPLOY_BRANCH_FOR_DEV'
      when: on_success
    - if: '$CI_COMMIT_BRANCH != $AUTO_DEPLOY_BRANCH_FOR_DEV'
      when: manual
  before_script:
  - echo "Running deploy_sw360_DEV_server by user - ${GITLAB_USER_EMAIL}"
  script:
  - echo "Trigger aws CodeDeploy for Dev server"
  - ./scripts/aws_codedeploy/check_is_user_allowed_to_trigger_job.sh
  - apt-get -qq update && apt-get install awscli -y --no-install-recommends
  - DEPLOYMENT_ID=$(aws deploy create-deployment --application-name ${CODE_DEPLOY_APP_NAME_DEV} --deployment-group-name ${CODE_DEPLOY_GROUP_NAME_DEV} --description "Trigger from Gitlab ci" --s3-location bucket=${SW360_BUCKET_NAME},bundleType=zip,key=${PACKAGE_NAME_PREFIX}_${CI_COMMIT_REF_SLUG}_${CI_COMMIT_SHORT_SHA}.zip | python -c 'import json,sys;obj=json.load(sys.stdin);print obj["deploymentId"]')
  - ./scripts/aws_codedeploy/check_deployment_status.sh ${DEPLOYMENT_ID}

deploy_sw360_STAGE_server:
  allow_failure: true
  stage: deploy_to_stage
  environment:
    name: Stage
  when: manual
  before_script:
  - echo "Running deploy_sw360_STAGE_server by user - ${GITLAB_USER_EMAIL}"
  script:
  - echo "Trigger aws CodeDeploy for Stage server"
  - ./scripts/aws_codedeploy/check_is_user_allowed_to_trigger_job.sh
  - apt-get -qq update && apt-get install awscli -y --no-install-recommends
  - DEPLOYMENT_ID=$(aws deploy create-deployment --application-name ${CODE_DEPLOY_APP_NAME_STAGE} --deployment-group-name ${CODE_DEPLOY_GROUP_NAME_STAGE} --description "Trigger from Gitlab ci" --s3-location bucket=${SW360_BUCKET_NAME},bundleType=zip,key=${PACKAGE_NAME_PREFIX}_${CI_COMMIT_REF_SLUG}_${CI_COMMIT_SHORT_SHA}.zip | python -c 'import json,sys;obj=json.load(sys.stdin);print obj["deploymentId"]')
  - ./scripts/aws_codedeploy/check_deployment_status.sh ${DEPLOYMENT_ID}
